
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { useToast } from "@/hooks/use-toast"
import { ChefHat, Clock, ListPlus, Sparkles, Users } from "lucide-react"
import { useState } from "react"

interface Recipe {
  name: string
  description: string
  ingredients: string[]
  instructions: string[]
  prepTime: number
  servings: number
  difficulty: string
}

const Recipes = () => {
  const [searchQuery, setSearchQuery] = useState("")
  const [selectedCuisine, setSelectedCuisine] = useState("all")
  const [selectedDifficulty, setSelectedDifficulty] = useState("all")
  const [isLoading, setIsLoading] = useState(false)
  const [currentRecipe, setCurrentRecipe] = useState<Recipe | null>(null)
  const [newListName, setNewListName] = useState("")
  const [isAddToListDialogOpen, setIsAddToListDialogOpen] = useState(false)
  const { toast } = useToast()

  // Mock recipe data for demonstration
  const mockRecipes: Recipe[] = [
    {
      name: "Classic Spaghetti Carbonara",
      description: "A traditional Italian pasta dish with eggs, cheese, and pancetta",
      ingredients: [
        "400g spaghetti",
        "200g pancetta or guanciale",
        "4 large eggs",
        "100g Pecorino Romano cheese",
        "Black pepper",
        "Salt"
      ],
      instructions: [
        "Bring a large pot of salted water to boil and cook spaghetti",
        "Cook pancetta in a large skillet until crispy",
        "Whisk eggs with grated cheese and black pepper",
        "Drain pasta and toss with pancetta",
        "Remove from heat and quickly stir in egg mixture",
        "Serve immediately with extra cheese"
      ],
      prepTime: 25,
      servings: 4,
      difficulty: "Medium"
    },
    {
      name: "Thai Green Curry",
      description: "Aromatic and spicy Thai curry with coconut milk and fresh herbs",
      ingredients: [
        "2 tbsp green curry paste",
        "400ml coconut milk",
        "500g chicken breast",
        "Thai basil leaves",
        "2 Thai eggplants",
        "Fish sauce",
        "Palm sugar",
        "Jasmine rice"
      ],
      instructions: [
        "Heat coconut milk in a pan and add curry paste",
        "Add chicken and cook until tender",
        "Add eggplants and cook for 5 minutes",
        "Season with fish sauce and palm sugar",
        "Garnish with Thai basil",
        "Serve with jasmine rice"
      ],
      prepTime: 30,
      servings: 4,
      difficulty: "Medium"
    }
  ]

  const generateRecipe = async () => {
    if (!searchQuery.trim()) {
      toast({
        title: "Please enter a dish name",
        description: "Tell us what you'd like to cook!",
        variant: "destructive"
      })
      return
    }

    setIsLoading(true)

    // Simulate AI recipe generation
    await new Promise(resolve => setTimeout(resolve, 2000))

    // For demo purposes, return a mock recipe based on search
    const mockRecipe: Recipe = {
      name: searchQuery,
      description: `A delicious ${searchQuery} recipe generated by our AI chef`,
      ingredients: [
        "2 cups main ingredient",
        "1 onion, diced",
        "3 cloves garlic, minced",
        "2 tbsp olive oil",
        "Salt and pepper to taste",
        "Fresh herbs for garnish",
        "1 cup broth or stock",
        "Additional seasonings"
      ],
      instructions: [
        "Prepare all ingredients by washing and chopping",
        "Heat olive oil in a large pan over medium heat",
        "SautÃ© onion and garlic until fragrant",
        "Add main ingredients and cook until tender",
        "Season with salt, pepper, and herbs",
        "Add broth and simmer until flavors combine",
        "Adjust seasoning to taste",
        "Serve hot and enjoy!"
      ],
      prepTime: 35,
      servings: 4,
      difficulty: selectedDifficulty === "all" ? "Medium" : selectedDifficulty
    }

    setCurrentRecipe(mockRecipe)
    setIsLoading(false)

    toast({
      title: "Recipe generated!",
      description: `Found a great ${searchQuery} recipe for you.`,
    })
  }

  const addIngredientsToList = () => {
    if (!currentRecipe || !newListName.trim()) return

    try {
      // Get existing lists from localStorage
      const existingLists = JSON.parse(localStorage.getItem("saudaTalikaLists") || "[]")

      // Create new list with recipe ingredients
      const newList = {
        id: Date.now().toString(),
        name: newListName,
        description: `Ingredients for ${currentRecipe.name}`,
        items: currentRecipe.ingredients.map(ingredient => ({
          id: Date.now().toString() + Math.random(),
          text: ingredient,
          completed: false
        })),
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }

      // Save updated lists
      const updatedLists = [...existingLists, newList]
      localStorage.setItem("saudaTalikaLists", JSON.stringify(updatedLists))

      setIsAddToListDialogOpen(false)
      setNewListName("")

      toast({
        title: "List created!",
        description: `"${newListName}" has been created with all recipe ingredients.`,
      })
    } catch (error) {
      console.error("Error saving to localStorage:", error)
      toast({
        title: "Error",
        description: "Failed to save the list. Please try again.",
        variant: "destructive"
      })
    }
  }

  const cuisineTypes = [
    "Italian", "Thai", "Indian", "Mexican", "Chinese", "Japanese",
    "French", "Mediterranean", "American", "Korean"
  ]

  const difficultyLevels = ["Easy", "Medium", "Hard"]

  return (
    <div className="min-h-screen py-8 px-4">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-orange-600 to-red-600 bg-clip-text text-transparent">
            AI Recipe Generator
          </h1>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            Discover amazing recipes with AI and automatically add ingredients to your shopping lists
          </p>
        </div>

        {/* Recipe Search Form */}
        <Card className="border-orange-200 bg-white/80 mb-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-gray-800">
              <Sparkles className="h-5 w-5 text-orange-600" />
              What would you like to cook?
            </CardTitle>
            <CardDescription>
              Tell our AI chef what dish you're craving, and we'll create a personalized recipe for you
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              <div className="space-y-2">
                <Label htmlFor="dish">Dish Name</Label>
                <Input
                  id="dish"
                  placeholder="e.g., Chicken Tikka Masala"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  onKeyDown={(e) => e.key === 'Enter' && generateRecipe()}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="cuisine">Cuisine Type (Optional)</Label>
                <Select value={selectedCuisine} onValueChange={setSelectedCuisine}>
                  <SelectTrigger>
                    <SelectValue placeholder="Any cuisine" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">Any cuisine</SelectItem>
                    {cuisineTypes.map(cuisine => (
                      <SelectItem key={cuisine} value={cuisine.toLowerCase()}>
                        {cuisine}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="difficulty">Difficulty</Label>
                <Select value={selectedDifficulty} onValueChange={setSelectedDifficulty}>
                  <SelectTrigger>
                    <SelectValue placeholder="Any difficulty" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">Any difficulty</SelectItem>
                    {difficultyLevels.map(level => (
                      <SelectItem key={level} value={level.toLowerCase()}>
                        {level}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            <Button
              onClick={generateRecipe}
              disabled={isLoading || !searchQuery.trim()}
              className="w-full bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white"
            >
              {isLoading ? (
                <>
                  <Sparkles className="h-4 w-4 mr-2 animate-spin" />
                  Generating Recipe...
                </>
              ) : (
                <>
                  <ChefHat className="h-4 w-4 mr-2" />
                  Generate Recipe
                </>
              )}
            </Button>
          </CardContent>
        </Card>

        {/* Generated Recipe */}
        {currentRecipe && (
          <Card className="border-orange-200 bg-white/80 mb-8">
            <CardHeader>
              <div className="flex flex-col sm:flex-row justify-between items-start gap-4">
                <div>
                  <CardTitle className="text-2xl text-gray-800 mb-2">
                    {currentRecipe.name}
                  </CardTitle>
                  <CardDescription className="text-gray-600">
                    {currentRecipe.description}
                  </CardDescription>
                </div>

                <Dialog open={isAddToListDialogOpen} onOpenChange={setIsAddToListDialogOpen}>
                  <DialogTrigger asChild>
                    <Button className="bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white">
                      <ListPlus className="h-4 w-4 mr-2" />
                      Add to List
                    </Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Create Shopping List</DialogTitle>
                      <DialogDescription>
                        All recipe ingredients will be added to a new shopping list.
                      </DialogDescription>
                    </DialogHeader>
                    <div className="space-y-4">
                      <div>
                        <Label htmlFor="listName">List Name</Label>
                        <Input
                          id="listName"
                          value={newListName}
                          onChange={(e) => setNewListName(e.target.value)}
                          placeholder={`Ingredients for ${currentRecipe.name}`}
                        />
                      </div>
                    </div>
                    <DialogFooter>
                      <Button variant="outline" onClick={() => setIsAddToListDialogOpen(false)}>
                        Cancel
                      </Button>
                      <Button onClick={addIngredientsToList} disabled={!newListName.trim()}>
                        Create List
                      </Button>
                    </DialogFooter>
                  </DialogContent>
                </Dialog>
              </div>

              <div className="flex flex-wrap gap-2 mt-4">
                <Badge variant="outline" className="border-orange-300 text-orange-600">
                  <Clock className="h-3 w-3 mr-1" />
                  {currentRecipe.prepTime} mins
                </Badge>
                <Badge variant="outline" className="border-orange-300 text-orange-600">
                  <Users className="h-3 w-3 mr-1" />
                  Serves {currentRecipe.servings}
                </Badge>
                <Badge variant="outline" className="border-orange-300 text-orange-600">
                  {currentRecipe.difficulty}
                </Badge>
              </div>
            </CardHeader>

            <CardContent>
              <div className="grid md:grid-cols-2 gap-8">
                {/* Ingredients */}
                <div>
                  <h3 className="text-lg font-semibold text-gray-800 mb-4">Ingredients</h3>
                  <ul className="space-y-2">
                    {currentRecipe.ingredients.map((ingredient, index) => (
                      <li key={index} className="flex items-start gap-2">
                        <span className="text-orange-600 mt-1">â¢</span>
                        <span className="text-gray-700">{ingredient}</span>
                      </li>
                    ))}
                  </ul>
                </div>

                {/* Instructions */}
                <div>
                  <h3 className="text-lg font-semibold text-gray-800 mb-4">Instructions</h3>
                  <ol className="space-y-3">
                    {currentRecipe.instructions.map((instruction, index) => (
                      <li key={index} className="flex gap-3">
                        <span className="flex-shrink-0 w-6 h-6 bg-gradient-to-r from-orange-500 to-red-500 text-white text-sm font-semibold rounded-full flex items-center justify-center">
                          {index + 1}
                        </span>
                        <span className="text-gray-700 text-sm">{instruction}</span>
                      </li>
                    ))}
                  </ol>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Popular Recipes */}
        <div className="mb-8">
          <h2 className="text-2xl font-bold text-gray-800 mb-6">Past Recipes</h2>
          <div className="grid md:grid-cols-2 gap-6">
            {mockRecipes.map((recipe, index) => (
              <Card key={index} className="border-orange-200 hover:shadow-lg transition-shadow duration-300 bg-white/80">
                <CardHeader>
                  <CardTitle className="text-lg text-gray-800">{recipe.name}</CardTitle>
                  <CardDescription>{recipe.description}</CardDescription>
                  <div className="flex gap-2 mt-2">
                    <Badge variant="outline" className="border-orange-300 text-orange-600">
                      <Clock className="h-3 w-3 mr-1" />
                      {recipe.prepTime} mins
                    </Badge>
                    <Badge variant="outline" className="border-orange-300 text-orange-600">
                      <Users className="h-3 w-3 mr-1" />
                      Serves {recipe.servings}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent>
                  <Button
                    onClick={() => setCurrentRecipe(recipe)}
                    variant="outline"
                    className="w-full border-orange-300 text-orange-600 hover:bg-orange-50"
                  >
                    View Recipe
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </div>
    </div>
  )
}

export default Recipes
